# -*- coding: utf-8 -*-
"""Proyek Akhir : Image Classification Model Deployment.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/148qvQZVfHhDMPP7peszxvwJJI8MGJMYl

- **Nama:** Aulia Afifah
- **ID Dicoding:** auliaafifah253

# Menyiapkan Library
"""

import os
import random
import shutil
import matplotlib.pyplot as plt
import tensorflow as tf
import matplotlib.pyplot as plt
import numpy as np
import pathlib

from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Conv2D, MaxPooling2D, Flatten, Dense, Dropout
from tensorflow.keras.preprocessing.image import ImageDataGenerator
from tensorflow.keras.callbacks import EarlyStopping, ModelCheckpoint
from kaggle.api.kaggle_api_extended import KaggleApi

!pip install -q kaggle
!mkdir ~/.kaggle
!cp kaggle.json ~/.kaggle
!chmod 600 ~/.kaggle/kaggle.json
!kaggle datasets download -d 'yusuftaqiyuddin/fruit-12'

!unzip -q fruit-12.zip -d fruit-12-data

destination_folder = "df"
os.makedirs(destination_folder, exist_ok=True)

fruit_folders = ["Apple", "Mango", "Melon"]

for fruit in fruit_folders:
    src_folder = f"fruit-12-data/{fruit}"
    dst_folder = os.path.join(destination_folder, fruit)
    shutil.move(src_folder, dst_folder)

print(f"Folder buah yang dipilih sudah dipindahkan ke dalam --> {destination_folder}")

!rm fruit-12.zip

"""# Preprocessing data"""

train_folder = os.path.join(destination_folder, "train")
test_folder = os.path.join(destination_folder, "test")
os.makedirs(train_folder, exist_ok=True)
os.makedirs(test_folder, exist_ok=True)

train_size_ratio = 0.8

for fruit in fruit_folders:
    fruit_src_folder = os.path.join(destination_folder, fruit)
    fruit_train_folder = os.path.join(train_folder, fruit)
    fruit_test_folder = os.path.join(test_folder, fruit)

    os.makedirs(fruit_train_folder, exist_ok=True)
    os.makedirs(fruit_test_folder, exist_ok=True)

    images = os.listdir(fruit_src_folder)

    random.shuffle(images)
    train_size = int(train_size_ratio * len(images))

    train_images = images[:train_size]
    test_images = images[train_size:]

    for image in train_images:
        src_path = os.path.join(fruit_src_folder, image)
        dst_path = os.path.join(fruit_train_folder, image)
        shutil.move(src_path, dst_path)

    for image in test_images:
        src_path = os.path.join(fruit_src_folder, image)
        dst_path = os.path.join(fruit_test_folder, image)
        shutil.move(src_path, dst_path)

print(f"Data tersebut telah dibagi ke dalam folder train dan test di --> {destination_folder}")

fruit_folders = ["Apple", "Mango", "Melon"]

for fruit in fruit_folders:
    fruit_folder = os.path.join(destination_folder, fruit)

    if os.path.exists(fruit_folder):
        shutil.rmtree(fruit_folder)
        print(f"Folder {fruit} telah dihapus yaaa")
    else:
        print(f"Folder {fruit} tidak ditemukan atau sudah dihapus sebelumnyaaa")

TRAINING_DIR = "df/train"
VALIDATION_DIR = "df/test"

train_datagen = ImageDataGenerator(
    rescale=1.0/255,
    rotation_range=30,
    shear_range=0.2,
    zoom_range=0.2,
    vertical_flip=True,
    fill_mode='nearest'
)

train_generator = train_datagen.flow_from_directory(TRAINING_DIR,
                                                    batch_size=32,
                                                    class_mode='categorical',
                                                    target_size=(150, 150))

validation_datagen = ImageDataGenerator(
    rescale=1.0/255
)
validation_generator = validation_datagen.flow_from_directory(VALIDATION_DIR,
                                                            batch_size=16,
                                                            class_mode='categorical',
                                                            target_size=(150, 150))

"""# Membuat model"""

class MyCallback(tf.keras.callbacks.Callback):
    def on_epoch_end(self, epoch, logs=None):
        if logs is not None:
            accuracy = logs.get('accuracy')
            if accuracy > 0.95:
                print("\nAkurasi telah mencapai >95%!")
                self.model.stop_training = True

callbacks = MyCallback()

model = tf.keras.models.Sequential([
    tf.keras.layers.Conv2D(32, (3, 3), activation='relu', input_shape=(150, 150, 3)),
    tf.keras.layers.MaxPooling2D((2, 2)),
    tf.keras.layers.Flatten(),
    tf.keras.layers.Dense(128, activation='relu'),
    tf.keras.layers.Dense(train_generator.num_classes, activation='softmax')
])

model.compile(loss='categorical_crossentropy',
              optimizer='adam',
              metrics=['accuracy'])

"""# Melatih model"""

history = model.fit(
    train_generator,
    epochs=30,
    validation_data=validation_generator,
    callbacks=[callbacks]
)

test_loss, test_acc = model.evaluate(validation_generator)
print(f"Test accuracy menunjukkan: {test_acc * 100:.2f}%")

epochs = len(history.history['loss'])

plt.style.use("ggplot")
plt.figure(figsize=(10, 5))
plt.plot(np.arange(0, epochs), history.history["loss"], label="training")
plt.plot(np.arange(0, epochs), history.history["val_loss"], label="validation")
plt.title("Loss")
plt.xlabel("Epoch")
plt.ylabel("Loss")
plt.legend()

plt.figure(figsize=(10, 5))
plt.plot(np.arange(0, epochs), history.history["accuracy"], label="training")
plt.plot(np.arange(0, epochs), history.history["val_accuracy"], label="validation")
plt.title("Accuracy")
plt.xlabel("Epoch")
plt.ylabel("Accuracy")
plt.legend()

"""# Mengubah model"""

export_dir = 'saved_model/'
tf.saved_model.save(model, export_dir)

converter = tf.lite.TFLiteConverter.from_saved_model(export_dir)
tflite_model = converter.convert()

tflite_model_file = pathlib.Path('vegs.tflite')
tflite_model_file.write_bytes(tflite_model)